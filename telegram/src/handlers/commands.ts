import { Context } from "telegraf";
import { botConfig } from "../config/bot.js";
import { databaseService } from "../services/database.js";
import { messageFormatter } from "../services/message-formatter.js";
import { twitterMonitorService } from "../services/twitter-monitor.js";

/**
 * Check if user is admin
 */
function isAdmin(ctx: Context): boolean {
  const userId = ctx.from?.id.toString();
  return userId === botConfig.telegram.adminId;
}

/**
 * Admin middleware
 */
export function adminOnly() {
  return (ctx: Context, next: () => Promise<void>) => {
    if (!isAdmin(ctx)) {
      const lang = botConfig.monitoring.language;
      const message =
        lang === "ru"
          ? "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã"
          : "‚ùå You do not have permission to execute this command";
      return ctx.reply(message);
    }
    return next();
  };
}

/**
 * Start command handler
 */
export async function startCommand(ctx: Context) {
  const lang = botConfig.monitoring.language;

  if (lang === "ru") {
    const message = `ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Twitter —Å AI –∞–Ω–∞–ª–∏–∑–æ–º.

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/status - –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/monitor start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
/monitor stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
/fetch - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Ç–≤–∏—Ç—Ç–æ–≤ —Å–µ–π—á–∞—Å
/analyze <url> - –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–∏—Ç—Ç
/reset - –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

üí° –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ AI –∞–Ω–∞–ª–∏–∑–∞:
‚Ä¢ –ü—Ä–æ—Å—Ç–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–º—ã—Å–ª–∞ —Ç–≤–∏—Ç—Ç–∞
‚Ä¢ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ —Ö–æ—Ç–µ–ª —Å–∫–∞–∑–∞—Ç—å –∞–≤—Ç–æ—Ä
‚Ä¢ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∞–≤—Ç–æ—Ä—Å–∫–∏—Ö —Ç—Ä–µ–¥–æ–≤ (—Ü–µ–ø–æ—á–µ–∫ —Ç–≤–∏—Ç—Ç–æ–≤)
‚Ä¢ –≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞

üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏:
‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—ã–µ ${botConfig.monitoring.intervalMinutes} –º–∏–Ω—É—Ç
‚Ä¢ –Ø–∑—ã–∫ –∞–Ω–∞–ª–∏–∑–∞: ${botConfig.monitoring.language}
‚Ä¢ –§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π: ${botConfig.monitoring.messageFormat}

‚ÑπÔ∏è –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç –Ω–æ–≤—ã–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ç–≤–∏—Ç—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –≤ —ç—Ç–æ—Ç —á–∞—Ç —Å –ø–æ–ª–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º.`;

    await ctx.reply(message);
  } else {
    const message = `ü§ñ Hello! I'm a Twitter monitoring bot with AI analysis.

üìã Available commands:
/status - Monitoring status and statistics
/monitor start - Start monitoring
/monitor stop - Stop monitoring
/fetch - Fetch new tweets now
/analyze <url> - Analyze a tweet
/reset - Reset monitoring state

üí° New AI analysis features:
‚Ä¢ Simple explanation of tweet meaning
‚Ä¢ What the author was trying to say
‚Ä¢ Complex terms explained simply
‚Ä¢ Analysis of author thread chains
‚Ä¢ Expert analysis for the project

üîß Settings:
‚Ä¢ Interval: every ${botConfig.monitoring.intervalMinutes} minutes
‚Ä¢ Analysis language: ${botConfig.monitoring.language}
‚Ä¢ Message format: ${botConfig.monitoring.messageFormat}

‚ÑπÔ∏è Bot automatically monitors new relevant tweets and sends them to this chat with full analysis.`;

    await ctx.reply(message);
  }
}

/**
 * Status command handler
 */
export async function statusCommand(ctx: Context) {
  try {
    // Get monitoring status
    const monitoringState = twitterMonitorService.getStatus();

    // Get database stats
    const dbStats = await databaseService.getMonitoringStats();

    // Check database connection
    const dbConnected = await databaseService.checkConnection();

    const stats = {
      ...dbStats,
      isMonitoring: monitoringState.isRunning,
    };

    const statusMessage = messageFormatter.formatStatusMessage(stats);

    // Add technical info
    const lang = botConfig.monitoring.language;
    const dbStatus = dbConnected
      ? lang === "ru"
        ? "üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞"
        : "üü¢ Connected"
      : lang === "ru"
      ? "üî¥ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
      : "üî¥ Connection error";

    const lastCheck = monitoringState.lastCheck
      ? monitoringState.lastCheck.toLocaleString()
      : lang === "ru"
      ? "–ù–∏–∫–æ–≥–¥–∞"
      : "Never";

    const technicalInfo =
      lang === "ru"
        ? `\n\nüîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${dbStatus}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: ${lastCheck}
‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: ${monitoringState.stats.totalChecks}
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–≤–∏—Ç—Ç–æ–≤: ${monitoringState.stats.totalTweetsSent}`
        : `\n\nüîß Technical information:
‚Ä¢ Database: ${dbStatus}
‚Ä¢ Last check: ${lastCheck}
‚Ä¢ Total checks: ${monitoringState.stats.totalChecks}
‚Ä¢ Tweets sent: ${monitoringState.stats.totalTweetsSent}`;

    await ctx.reply(statusMessage + technicalInfo);
  } catch (error) {
    console.error("Error in status command:", error);
    const lang = botConfig.monitoring.language;
    const errorMessage =
      lang === "ru"
        ? "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞"
        : "‚ùå Error getting status";
    await ctx.reply(errorMessage);
  }
}

/**
 * Monitor command handler
 */
export async function monitorCommand(ctx: Context) {
  const args =
    ctx.message && "text" in ctx.message
      ? ctx.message.text.split(" ").slice(1)
      : [];

  const action = args[0]?.toLowerCase();
  const lang = botConfig.monitoring.language;

  if (!action || !["start", "stop"].includes(action)) {
    const helpMessage =
      lang === "ru"
        ? "‚ùì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /monitor start|stop"
        : "‚ùì Usage: /monitor start|stop";
    return ctx.reply(helpMessage);
  }

  try {
    if (action === "start") {
      const started = twitterMonitorService.start();
      if (started) {
        const message =
          lang === "ru"
            ? `‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!
          
üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ ${botConfig.monitoring.intervalMinutes} –º–∏–Ω—É—Ç
üìä –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥`
            : `‚úÖ Monitoring started!
          
üîÑ Checking every ${botConfig.monitoring.intervalMinutes} minutes  
üìä First check in 30 seconds`;
        await ctx.reply(message);
      } else {
        const message =
          lang === "ru"
            ? "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
            : "‚ùå Failed to start monitoring";
        await ctx.reply(message);
      }
    } else {
      twitterMonitorService.stop();
      const message =
        lang === "ru" ? "üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" : "üõë Monitoring stopped";
      await ctx.reply(message);
    }
  } catch (error) {
    console.error("Error in monitor command:", error);
    const errorMessage =
      lang === "ru"
        ? "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º"
        : "‚ùå Error controlling monitoring";
    await ctx.reply(errorMessage);
  }
}

/**
 * Fetch command handler - manually trigger tweet parsing
 */
export async function fetchCommand(ctx: Context) {
  const lang = botConfig.monitoring.language;

  try {
    const fetchingMessage =
      lang === "ru"
        ? "üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Ç–≤–∏—Ç—Ç–æ–≤..."
        : "üîÑ Fetching new tweets...";

    await ctx.reply(fetchingMessage);

    // Run full monitoring cycle
    const progressMessage =
      lang === "ru"
        ? "üì° –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ Twitter –∏ –ø—Ä–æ–≤–µ—Ä—è—é –Ω–æ–≤—ã–µ —Ç–≤–∏—Ç—Ç—ã..."
        : "üì° Connecting to Twitter and checking for new tweets...";

    try {
      await ctx.editMessageText(progressMessage);
    } catch {
      await ctx.reply(progressMessage);
    }

    const newTweets = await twitterMonitorService.runFullMonitoringCycle();

    if (newTweets.length > 0) {
      const successMessage =
        lang === "ru"
          ? `‚úÖ –ù–∞–π–¥–µ–Ω–æ ${newTweets.length} –Ω–æ–≤—ã—Ö —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ç–≤–∏—Ç—Ç–æ–≤! –û—Ç–ø—Ä–∞–≤–ª—è—é...`
          : `‚úÖ Found ${newTweets.length} new relevant tweets! Sending...`;

      try {
        await ctx.editMessageText(successMessage);
      } catch {
        await ctx.reply(successMessage);
      }

      // Import notification service
      const { BotNotificationService } = await import(
        "../services/bot-notification.js"
      );
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mockBot = { telegram: ctx.telegram } as any;
      const notificationService = new BotNotificationService(mockBot);
      await notificationService.sendTweetBatch(newTweets);

      const completedMessage =
        lang === "ru"
          ? `üéâ –ì–æ—Ç–æ–≤–æ! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${newTweets.length} —Ç–≤–∏—Ç—Ç–æ–≤ –≤ —á–∞—Ç.`
          : `üéâ Done! Sent ${newTweets.length} tweets to chat.`;

      setTimeout(async () => {
        try {
          await ctx.editMessageText(completedMessage);
        } catch {
          await ctx.reply(completedMessage);
        }
      }, 2000);
    } else {
      const noTweetsMessage =
        lang === "ru"
          ? "üì≠ –ù–æ–≤—ã—Ö —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ç–≤–∏—Ç—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
          : "üì≠ No new relevant tweets found.";

      try {
        await ctx.editMessageText(noTweetsMessage);
      } catch {
        await ctx.reply(noTweetsMessage);
      }
    }
  } catch (error) {
    console.error("Error in fetch command:", error);
    const errorMessage =
      lang === "ru"
        ? `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: ${String(error).slice(0, 100)}...`
        : `‚ùå Error fetching tweets: ${String(error).slice(0, 100)}...`;

    try {
      await ctx.editMessageText(errorMessage);
    } catch {
      await ctx.reply(errorMessage);
    }
  }
}

/**
 * Reset command handler - reset monitoring state
 */
export async function resetCommand(ctx: Context) {
  const lang = botConfig.monitoring.language;

  try {
    // Reset monitoring state
    twitterMonitorService.resetState();

    const successMessage =
      lang === "ru"
        ? "‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–±—Ä–æ—à–µ–Ω–æ. –¢–µ–ø–µ—Ä—å /fetch –Ω–∞–π–¥–µ—Ç –≤—Å–µ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–≤–∏—Ç—ã."
        : "‚úÖ Monitoring state reset. Now /fetch will find all unsent tweets.";

    await ctx.reply(successMessage);
  } catch (error) {
    console.error("Error in reset command:", error);
    const errorMessage =
      lang === "ru"
        ? `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ: ${String(error).slice(0, 100)}...`
        : `‚ùå Error resetting state: ${String(error).slice(0, 100)}...`;

    await ctx.reply(errorMessage);
  }
}

/**
 * Analyze command handler
 */
export async function analyzeCommand(ctx: Context) {
  const args =
    ctx.message && "text" in ctx.message
      ? ctx.message.text.split(" ").slice(1)
      : [];

  const url = args[0];
  const lang = botConfig.monitoring.language;

  if (!url) {
    const helpMessage =
      lang === "ru"
        ? "‚ùì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /analyze <twitter_url>\n\n–ü—Ä–∏–º–µ—Ä: /analyze https://twitter.com/user/status/123"
        : "‚ùì Usage: /analyze <twitter_url>\n\nExample: /analyze https://twitter.com/user/status/123";
    return ctx.reply(helpMessage);
  }

  // Validate Twitter URL
  if (!url.includes("twitter.com") && !url.includes("x.com")) {
    const errorMessage =
      lang === "ru"
        ? "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ Twitter"
        : "‚ùå Please provide a valid Twitter URL";
    return ctx.reply(errorMessage);
  }

  try {
    const processingMessage =
      lang === "ru" ? "‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–∏—Ç—Ç..." : "‚è≥ Analyzing tweet...";
    await ctx.reply(processingMessage);

    // Extract tweet ID from URL
    const tweetIdMatch = url.match(/status\/(\d+)/);
    if (!tweetIdMatch) {
      const errorMessage =
        lang === "ru"
          ? "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID —Ç–≤–∏—Ç—Ç–∞ –∏–∑ URL"
          : "‚ùå Could not extract tweet ID from URL";
      try {
        return ctx.editMessageText(errorMessage);
      } catch {
        return ctx.reply(errorMessage);
      }
    }

    const tweetId = tweetIdMatch[1];

    // Check if tweet exists in database
    const tweet = await databaseService.getTweetById(tweetId);

    if (!tweet) {
      // Tweet not in database, need to parse it first
      const parseMessage =
        lang === "ru"
          ? "üîç –¢–≤–∏—Ç—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ, –ø–∞—Ä—Å—é..."
          : "üîç Tweet not found in database, parsing...";

      try {
        await ctx.editMessageText(parseMessage);
      } catch {
        await ctx.reply(parseMessage);
      }

      // This would require calling the main app's parser API
      // For now, return error
      const errorMessage =
        lang === "ru"
          ? "‚ùå –¢–≤–∏—Ç—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–Ω–∞—á–∞–ª–∞."
          : "‚ùå Tweet not found in database. Please add it through the main application first.";

      try {
        return ctx.editMessageText(errorMessage);
      } catch {
        return ctx.reply(errorMessage);
      }
    }

    // Format and send tweet analysis
    const formattedMessage = messageFormatter.formatTweet(tweet);
    try {
      await ctx.editMessageText(formattedMessage);
    } catch {
      // If editing fails, send as new message
      await ctx.reply(formattedMessage);
    }
  } catch (error) {
    console.error("Error in analyze command:", error);
    const errorMessage =
      lang === "ru"
        ? "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–≤–∏—Ç—Ç–∞"
        : "‚ùå Error analyzing tweet";
    await ctx.reply(errorMessage);
  }
}
