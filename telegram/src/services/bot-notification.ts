import { Telegraf } from "telegraf";
import { botConfig } from "../config/bot.js";
import { messageFormatter } from "./message-formatter.js";
import { TweetData, databaseService } from "./database.js";

export class BotNotificationService {
  private bot: Telegraf;
  private chatId: string;

  constructor(bot: Telegraf) {
    this.bot = bot;
    this.chatId = botConfig.telegram.chatId;
  }

  /**
   * Send a batch of tweets to the chat
   */
  async sendTweetBatch(tweets: TweetData[]): Promise<void> {
    if (tweets.length === 0) {
      console.log("üì≠ No tweets to send");
      return;
    }

    try {
      console.log(`üì§ Sending ${tweets.length} tweets to chat ${this.chatId}`);

      const messages = messageFormatter.formatTweetBatch(tweets);

      // Send messages with delay to avoid rate limits
      for (const message of messages) {
        try {
          await this.bot.telegram.sendMessage(this.chatId, message, {
            parse_mode: "HTML",
          });

          // Delay between messages to avoid spam
          if (messages.length > 1) {
            await new Promise((resolve) => setTimeout(resolve, 1000));
          }
        } catch (error) {
          console.error("‚ùå Error sending message:", error);

          // If message is too long, try to send truncated version
          if (String(error).includes("message is too long")) {
            const truncatedMessage = this.truncateMessage(message);
            try {
              await this.bot.telegram.sendMessage(
                this.chatId,
                truncatedMessage,
                {
                  parse_mode: "HTML",
                }
              );
            } catch (truncError) {
              console.error("‚ùå Error sending truncated message:", truncError);
            }
          }
        }
      }

      console.log("‚úÖ All messages sent successfully");

      // Mark tweets as sent in database
      const tweetIds = tweets.map((tweet) => tweet.tweetId);
      await databaseService.markTweetsAsSent(tweetIds);
    } catch (error) {
      console.error("‚ùå Error sending tweet batch:", error);
      throw error;
    }
  }

  /**
   * Send a single tweet
   */
  async sendTweet(tweet: TweetData): Promise<void> {
    await this.sendTweetBatch([tweet]);
  }

  /**
   * Send a simple text message
   */
  async sendMessage(text: string): Promise<void> {
    try {
      await this.bot.telegram.sendMessage(this.chatId, text);
      console.log("‚úÖ Message sent successfully");
    } catch (error) {
      console.error("‚ùå Error sending message:", error);
      throw error;
    }
  }

  /**
   * Send notification about monitoring errors
   */
  async sendErrorNotification(error: string): Promise<void> {
    const lang = botConfig.monitoring.language;
    const errorMessage =
      lang === "ru"
        ? `‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:\n\n${error}`
        : `‚ö†Ô∏è Monitoring error:\n\n${error}`;

    try {
      await this.sendMessage(errorMessage);
    } catch (sendError) {
      console.error("‚ùå Failed to send error notification:", sendError);
    }
  }

  /**
   * Send startup notification
   */
  async sendStartupNotification(): Promise<void> {
    const lang = botConfig.monitoring.language;
    const message =
      lang === "ru"
        ? `üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!

üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏:
‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${botConfig.monitoring.intervalMinutes} –º–∏–Ω—É—Ç
‚Ä¢ –Ø–∑—ã–∫ –∞–Ω–∞–ª–∏–∑–∞: ${botConfig.monitoring.language}
‚Ä¢ –§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π: ${botConfig.monitoring.messageFormat}

‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è`
        : `üöÄ Bot started and ready!

üîß Settings:
‚Ä¢ Monitoring interval: ${botConfig.monitoring.intervalMinutes} minutes
‚Ä¢ Analysis language: ${botConfig.monitoring.language}
‚Ä¢ Message format: ${botConfig.monitoring.messageFormat}

‚ÑπÔ∏è Use /status to check status`;

    try {
      await this.sendMessage(message);
    } catch (error) {
      console.error("‚ùå Failed to send startup notification:", error);
    }
  }

  /**
   * Truncate message if it's too long for Telegram
   */
  private truncateMessage(message: string): string {
    const maxLength = 4000; // Telegram limit is 4096, leave some margin

    if (message.length <= maxLength) {
      return message;
    }

    const truncated = message.substring(0, maxLength - 100);
    const lang = botConfig.monitoring.language;
    const suffix =
      lang === "ru"
        ? "\n\n... (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã)"
        : "\n\n... (message truncated due to length limit)";

    return truncated + suffix;
  }

  /**
   * Check if chat is accessible
   */
  async checkChatAccess(): Promise<boolean> {
    try {
      await this.bot.telegram.getChat(this.chatId);
      return true;
    } catch (error) {
      console.error("‚ùå Chat access check failed:", error);
      return false;
    }
  }
}

// Will be initialized in main bot file
export let botNotificationService: BotNotificationService;
